{"mappings":"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","sources":["<anon>","web/src/main.ts","src/spd/parser.ts","src/spd/svg-renderer.ts"],"sourcesContent":["// web/src/main.ts\nclass $30ca700923f7cd7e$export$f9c837a54db411d extends Error {\n    constructor(message){\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\nclass $30ca700923f7cd7e$export$eaf10ed6e5991cf8 extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(){\n        super(\"\\u3053\\u306E\\u30B3\\u30DE\\u30F3\\u30C9\\u306F\\u5F15\\u6570\\u304C\\u5FC5\\u8981\\u3067\\u3059\");\n    }\n}\nclass $30ca700923f7cd7e$export$1d21b533e0dc3eed extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(){\n        super(\"\\u3053\\u306E\\u30B3\\u30DE\\u30F3\\u30C9\\u306B\\u5F15\\u6570\\u306F\\u4E0D\\u8981\\u3067\\u3059\");\n    }\n}\nclass $30ca700923f7cd7e$export$d0be8b16a0056b4a extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(){\n        super(\"\\u30A4\\u30F3\\u30C7\\u30F3\\u30C8\\u306E\\u6570\\u304C\\u4E0D\\u6B63\\u3067\\u3059\");\n    }\n}\nclass $30ca700923f7cd7e$export$1e06c21ce32643dc extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(){\n        super(\"\\u672A\\u77E5\\u306E\\u30B3\\u30DE\\u30F3\\u30C9\\u3067\\u3059\");\n    }\n}\nclass $30ca700923f7cd7e$export$91a4fa3e8e7c8586 extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(){\n        super(\"\\u4E0D\\u9069\\u5207\\u306Aelse\\u3067\\u3059\");\n    }\n}\nclass $30ca700923f7cd7e$export$773fc764960da4ba extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(){\n        super(\"\\u4E0D\\u9069\\u5207\\u306Acase\\u304C\\u73FE\\u308C\\u307E\\u3057\\u305F\");\n    }\n}\nclass $30ca700923f7cd7e$export$a235ab136f3fda43 extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(){\n        super(\"\\u65E2\\u306B\\u540C\\u540D\\u306ECase\\u304C\\u5B58\\u5728\\u3057\\u307E\\u3059\");\n    }\n}\nclass $30ca700923f7cd7e$export$ecfc75b1ea638281 extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(message){\n        super(\"\\u5185\\u90E8\\u30A8\\u30E9\\u30FC:\" + message);\n    }\n}\nclass $30ca700923f7cd7e$export$aeae85cd74b5f02 extends $30ca700923f7cd7e$export$f9c837a54db411d {\n    constructor(){\n        super(\"\\u4E88\\u671F\\u3057\\u306A\\u3044IO\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F\");\n    }\n}\n/**\n * パース中のコンテキストを扱うクラス。\n */ class $30ca700923f7cd7e$var$Context {\n    constructor(){\n        // 親のコンテキスト\n        this.parent = null;\n        // 深さ\n        this.depth = 0;\n        // ノードリスト\n        this.nodeList = [];\n        // コンテキストの追加状態\n        this.optionStatus = \"Default\";\n        // コンテキストの状態に結びつく引数\n        this.optionArg = null;\n    }\n}\nclass $30ca700923f7cd7e$export$a372c43d1a7fd5d1 {\n    static{\n        // コメントを判定する正規表現オブジェクト\n        this.patternComment = /^\\s*(#.*)?$/;\n    }\n    static{\n        this.DummyParseErrorReceiver = ()=>{\n            return false;\n        };\n    }\n    /**\n   * 本文を処理する\n   * @param context 現在のコンテキスト\n   * @param body 本文\n   */ static handleBody(context, body) {\n        // 状態の制御\n        if (context.nodeList.length > 0) {\n            let lnode = context.nodeList[context.nodeList.length - 1];\n            if (context.optionArg != null && lnode.type === \"switch\") {\n                let node = lnode;\n                node.cases.set(context.optionArg, null);\n                context.optionArg = null;\n            }\n        }\n        if (body.startsWith(\":\")) {\n            const parts = body.split(/[ \\t]+/);\n            // コマンド部分と引数部分を分離\n            const cmd = parts[0].substring(1); // コマンド名（例: \"call\", \"if\"）\n            const arg = parts.length > 1 ? body.substring(parts[0].length).trim() : null; // 引数\n            switch(cmd){\n                case \"call\":\n                    if (!arg) throw new $30ca700923f7cd7e$export$eaf10ed6e5991cf8();\n                    context.nodeList.push({\n                        type: \"call\",\n                        text: arg,\n                        childNode: null\n                    });\n                    context.optionStatus = \"Default\";\n                    context.optionArg = null;\n                    break;\n                case \"terminal\":\n                    if (!arg) throw new $30ca700923f7cd7e$export$eaf10ed6e5991cf8();\n                    context.nodeList.push({\n                        type: \"terminal\",\n                        text: arg\n                    });\n                    context.optionStatus = \"Default\";\n                    context.optionArg = null;\n                    break;\n                case \"comment\":\n                    if (!arg) throw new $30ca700923f7cd7e$export$eaf10ed6e5991cf8();\n                    context.nodeList.push({\n                        type: \"comment\",\n                        text: arg\n                    });\n                    context.optionStatus = \"Default\";\n                    context.optionArg = null;\n                    break;\n                case \"while\":\n                    if (!arg) throw new $30ca700923f7cd7e$export$eaf10ed6e5991cf8();\n                    context.nodeList.push({\n                        type: \"loop\",\n                        isWhile: true,\n                        text: arg,\n                        childNode: null\n                    });\n                    context.optionStatus = \"Default\";\n                    context.optionArg = null;\n                    break;\n                case \"dowhile\":\n                    if (!arg) throw new $30ca700923f7cd7e$export$eaf10ed6e5991cf8();\n                    context.nodeList.push({\n                        type: \"loop\",\n                        isWhile: false,\n                        text: arg,\n                        childNode: null\n                    });\n                    context.optionStatus = \"Default\";\n                    context.optionArg = null;\n                    break;\n                case \"if\":\n                    if (!arg) throw new $30ca700923f7cd7e$export$eaf10ed6e5991cf8();\n                    context.nodeList.push({\n                        type: \"if\",\n                        text: arg,\n                        trueNode: null,\n                        falseNode: null\n                    });\n                    context.optionStatus = \"Default\";\n                    context.optionArg = null;\n                    break;\n                case \"switch\":\n                    if (!arg) throw new $30ca700923f7cd7e$export$eaf10ed6e5991cf8();\n                    context.nodeList.push({\n                        type: \"switch\",\n                        text: arg,\n                        cases: new Map()\n                    });\n                    context.optionStatus = \"Default\";\n                    context.optionArg = null;\n                    break;\n                case \"else\":\n                    const lastIfNode = context.nodeList.length === 0 ? null : context.nodeList[context.nodeList.length - 1];\n                    if (lastIfNode === null || lastIfNode.type !== \"if\") throw new $30ca700923f7cd7e$export$91a4fa3e8e7c8586();\n                    if (arg !== null) throw new $30ca700923f7cd7e$export$1d21b533e0dc3eed();\n                    context.optionStatus = \"Else\";\n                    context.optionArg = null;\n                    break;\n                case \"case\":\n                    const lastSwitchNode = context.nodeList.length === 0 ? null : context.nodeList[context.nodeList.length - 1];\n                    if (lastSwitchNode === null || lastSwitchNode.type !== \"switch\") throw new $30ca700923f7cd7e$export$773fc764960da4ba();\n                    if (!arg) throw new $30ca700923f7cd7e$export$eaf10ed6e5991cf8();\n                    if (lastSwitchNode.cases.has(arg)) throw new $30ca700923f7cd7e$export$a235ab136f3fda43();\n                    context.optionStatus = \"Default\";\n                    context.optionArg = arg;\n                    break;\n                default:\n                    throw new $30ca700923f7cd7e$export$1e06c21ce32643dc();\n            }\n        } else {\n            context.nodeList.push({\n                type: \"process\",\n                text: body,\n                childNode: null\n            });\n            context.optionStatus = \"Default\";\n            context.optionArg = null;\n        }\n    }\n    /**\n   * 現在のコンテキストを確定し、親コンテキストに移動します。\n   * @param context 現在のコンテキスト。\n   * @returns 親コンテキスト。\n   */ static upToParent(context) {\n        if (context === null) return null;\n        // 状態の制御\n        if (context.nodeList.length > 0) {\n            let lnode = context.nodeList[context.nodeList.length - 1];\n            if (context.optionArg != null && lnode.type === \"switch\") {\n                let node = lnode;\n                node.cases.set(context.optionArg, null);\n                context.optionArg = null;\n            }\n        }\n        if (context.parent === null) return null;\n        // 追加するノードを新規作成。\n        let newNode = null;\n        if (context.nodeList.length == 0) return context.parent;\n        else if (context.nodeList.length == 1) newNode = context.nodeList[0];\n        else if (context.nodeList.length > 1) {\n            let nodeList = {\n                type: \"nodeList\",\n                children: []\n            };\n            for(let i = 0; i < context.nodeList.length; i++)nodeList.children.push(context.nodeList[i]);\n            newNode = nodeList;\n        } else throw new $30ca700923f7cd7e$export$ecfc75b1ea638281(\"Parent node is not found\");\n        // ノードの追加先となるノード。\n        let pnode = context.parent.nodeList[context.parent.nodeList.length - 1];\n        // ノードの種類に応じてノードの追加先に追加。\n        switch(pnode.type){\n            case \"process\":\n                let processNode = pnode;\n                processNode.childNode = newNode;\n                break;\n            case \"loop\":\n                let loopNode = pnode;\n                loopNode.childNode = newNode;\n                break;\n            case \"call\":\n                let callNode = pnode;\n                callNode.childNode = newNode;\n                break;\n            case \"switch\":\n                let snode = pnode;\n                snode.cases.set(context.parent.optionArg, newNode);\n                break;\n            case \"if\":\n                let ifnode = pnode;\n                if (context.parent.optionStatus === \"Default\") ifnode.trueNode = newNode;\n                else if (context.parent.optionStatus === \"Else\") {\n                    if (ifnode.falseNode !== null) throw new $30ca700923f7cd7e$export$91a4fa3e8e7c8586();\n                    else ifnode.falseNode = newNode;\n                } else throw new $30ca700923f7cd7e$export$ecfc75b1ea638281(\"Illegal option status\");\n                break;\n            default:\n                throw new $30ca700923f7cd7e$export$ecfc75b1ea638281(\"Illegal command\");\n        }\n        // 親ノードの状態をリセットする。\n        context.parent.optionStatus = \"Default\";\n        context.parent.optionArg = null;\n        // 親ノードを返す。\n        return context.parent;\n    }\n    /**\n   * SPDフォーマットの文字列をPADモデル（AST）にパースします。\n   * @param src SPDフォーマットの文字列。\n   * @returns パースされたASTのルートノード。\n   */ static parse(src, exr = $30ca700923f7cd7e$export$a372c43d1a7fd5d1.DummyParseErrorReceiver) {\n        // if(src == null) throw new IllegalArgumentException(\"src is null\"); // # diff TypeScriptではnullチェックは不要\n        // 先頭のコンテキスト\n        const rootContext = new $30ca700923f7cd7e$var$Context();\n        // 現在のコンテキスト\n        let context = rootContext;\n        // 終了フラグ\n        let errExit = false;\n        // １行づつ読み込む\n        // ソースコードを行ごとに分割\n        const lines = src.split(/\\r?\\n/);\n        let lineNo = 0; // 現在の行番号\n        try {\n            while(lineNo < lines.length){\n                let line = lines[lineNo];\n                lineNo++;\n                // コメント行は読み飛ばし\n                if ($30ca700923f7cd7e$export$a372c43d1a7fd5d1.patternComment.test(line)) continue;\n                // 先頭のタブ数を数える。\n                let tabNum = 0;\n                for(let i = 0; i < line.length; ++i){\n                    if (line.charAt(i) === \"\\t\") tabNum++;\n                    else break;\n                }\n                try {\n                    if (context === null) throw new $30ca700923f7cd7e$export$d0be8b16a0056b4a();\n                    // 子コンテキストの作成処理を行う。\n                    if (tabNum > 0 && context.nodeList.length == 0 || tabNum < 0) // 最初からタブがある場合は不正。\n                    throw new $30ca700923f7cd7e$export$d0be8b16a0056b4a();\n                    if (tabNum > context.depth) {\n                        // タブが増加した場合の処理\n                        // 正当性をチェックする。\n                        let parentNode = context.nodeList[context.nodeList.length - 1];\n                        if (tabNum > context.depth + 1 || parentNode && parentNode.type === \"comment\") // 親がコメントか２階層以上離れているのは不正。\n                        throw new $30ca700923f7cd7e$export$d0be8b16a0056b4a();\n                        if (parentNode.type === \"switch\" && context.optionArg == null) // 子を持たないタイプの場合は不正。\n                        throw new $30ca700923f7cd7e$export$d0be8b16a0056b4a();\n                        // 子コンテキストを生成する。\n                        let newContext = new $30ca700923f7cd7e$var$Context();\n                        newContext.parent = context;\n                        newContext.depth = context.depth + 1;\n                        context = newContext;\n                    }\n                    // タブが減少した際の処理\n                    while(tabNum < context.depth){\n                        context = $30ca700923f7cd7e$export$a372c43d1a7fd5d1.upToParent(context);\n                        if (context === null) throw new $30ca700923f7cd7e$export$d0be8b16a0056b4a();\n                    }\n                    // 本文は行のデータをtrimしたものとする。\n                    // 行末が @ の場合は複数行扱いとする。\n                    let body = line.substring(tabNum); // タブの後の本体部分を抽出\n                    if (body.endsWith(\"@\")) {\n                        let multiLineContent = body.substring(0, body.length - 1);\n                        while(lineNo < lines.length){\n                            let nextLine = lines[lineNo];\n                            lineNo++;\n                            // コメント行で止まる\n                            if ($30ca700923f7cd7e$export$a372c43d1a7fd5d1.patternComment.test(nextLine)) continue;\n                            // 行末に @ が間読み込む\n                            // 行末に @ がある間読み込む\n                            let nextLineTabNum = 0;\n                            for(let i = 0; i < nextLine.length; ++i){\n                                if (nextLine.charAt(i) === \"\\t\") nextLineTabNum++;\n                                else break;\n                            }\n                            let nextLineBody = nextLine.substring(nextLineTabNum);\n                            if (nextLineBody.endsWith(\"@\")) multiLineContent += \"\\n\" + nextLineBody.substring(0, nextLineBody.length - 1);\n                            else {\n                                multiLineContent += \"\\n\" + nextLineBody;\n                                break;\n                            }\n                        }\n                        body = multiLineContent;\n                    }\n                    body = body.replace(/@/g, \"\\n\");\n                    // 本文を処理する。\n                    $30ca700923f7cd7e$export$a372c43d1a7fd5d1.handleBody(context, body);\n                } catch (ex) {\n                    if (ex instanceof $30ca700923f7cd7e$export$f9c837a54db411d) {\n                        if (exr(line, lineNo - 1, ex)) continue;\n                        else throw ex;\n                    } else throw ex;\n                }\n            }\n            // 先頭まで戻る\n            while(!errExit && context != null)context = $30ca700923f7cd7e$export$a372c43d1a7fd5d1.upToParent(context);\n        } catch (ex) {\n            if (ex instanceof $30ca700923f7cd7e$export$f9c837a54db411d) throw ex; // テストと適切なエラーハンドリングのためにParseErrorを再スロー\n            else {\n                console.error(`\\u{884C} ${lineNo} \\u{3067}\\u{4E88}\\u{671F}\\u{3057}\\u{306A}\\u{3044}\\u{30A8}\\u{30E9}\\u{30FC}\\u{304C}\\u{767A}\\u{751F}\\u{3057}\\u{307E}\\u{3057}\\u{305F}: ${ex}`);\n                throw new $30ca700923f7cd7e$export$f9c837a54db411d(`\\u{4E88}\\u{671F}\\u{3057}\\u{306A}\\u{3044}\\u{30A8}\\u{30E9}\\u{30FC}: ${ex}`); // その他のエラーをラップ\n            }\n        }\n        // 途中で解析が終了した場合は、nullを返す。\n        if (errExit) return null;\n        // モデルを最終化して返す\n        if (rootContext.nodeList.length === 0) return null;\n        const topNode = {\n            type: \"nodeList\",\n            children: rootContext.nodeList\n        };\n        return topNode;\n    }\n}\n\n\n// デフォルトの描画オプション\nconst $6b098df580cc3f14$var$defaultRenderOptions = {\n    fontSize: 14,\n    fontFamily: \"sans-serif\",\n    margin: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n    },\n    boxPadding: {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n    },\n    branchePadding: {\n        top: 5,\n        right: 5,\n        bottom: 5,\n        left: 5\n    },\n    strokeWidth: 1,\n    strokeColor: \"#000000\",\n    backgroundColor: \"#ffffff\",\n    textColor: \"#000000\",\n    lineHeight: 1.2,\n    doubleLineWidth: 5,\n    switchNodeCaseWidth: 20,\n    connectorWidth: 2,\n    nodeListSpace: 10,\n    childNodeOffsetWidth: 20\n};\nfunction $6b098df580cc3f14$export$b3890eb0ae9dca99(node, options) {\n    const mergedOptions = {\n        ...$6b098df580cc3f14$var$defaultRenderOptions,\n        ...options\n    };\n    if (!node) return \"\";\n    const fragment = $6b098df580cc3f14$var$renderNode(node, mergedOptions);\n    const svgWidth = fragment.width + mergedOptions.margin.left + mergedOptions.margin.right;\n    const svgHeight = fragment.height + mergedOptions.margin.top + mergedOptions.margin.bottom;\n    let svg = `<svg `;\n    svg += `width=\"${svgWidth}\" height=\"${svgHeight}\" `;\n    svg += `viewBox=\"0 0 ${svgWidth} ${svgHeight}\" `;\n    svg += `xmlns=\"http://www.w3.org/2000/svg\">`;\n    svg += `<rect x=\"0\" y=\"0\" `;\n    svg += `width=\"${svgWidth}\" height=\"${svgHeight}\" `;\n    svg += `fill=\"${mergedOptions.backgroundColor}\"/>`;\n    svg += $6b098df580cc3f14$var$renderTransformTranslateSvg(mergedOptions.margin.left, mergedOptions.margin.top, fragment.svg);\n    svg += `</svg>`;\n    return svg;\n}\n/**\n * ASTのノード種別に応じて、対応する描画関数を呼び出す\n */ function $6b098df580cc3f14$var$renderNode(node, options) {\n    switch(node.type){\n        case \"process\":\n            return $6b098df580cc3f14$var$renderProcessFragment(node, options);\n        case \"terminal\":\n            return $6b098df580cc3f14$var$renderTerminalFragment(node, options);\n        case \"nodeList\":\n            return $6b098df580cc3f14$var$renderListFragment(node, options);\n        case \"call\":\n            return $6b098df580cc3f14$var$renderCallFragment(node, options);\n        case \"loop\":\n            return $6b098df580cc3f14$var$renderLoopFragment(node, options);\n        case \"if\":\n            return $6b098df580cc3f14$var$renderIfFragment(node, options);\n        case \"switch\":\n            return $6b098df580cc3f14$var$renderSwitchFragment(node, options);\n        case \"comment\":\n            return $6b098df580cc3f14$var$renderCommentFragment(node, options);\n        // 他のノードタイプは後で追加\n        default:\n            return {\n                svg: \"\",\n                width: 0,\n                height: 0,\n                type: \"Unknown\"\n            }; // 未実装のノードタイプ\n    }\n}\n/**\n * 箱型ノードの描画処理\n */ function $6b098df580cc3f14$var$renderBoxFragment(node, options) {\n    const textMetrics = $6b098df580cc3f14$var$measureTextSvg(node.text, options);\n    let contentWidth = textMetrics.width;\n    let contentHeight = textMetrics.height;\n    let textOffsetX = options.boxPadding.left;\n    let textOffsetY = 0;\n    let svg = ``;\n    if (node.borderType === \"Box\") {\n        // 四角形のボックス\n        contentWidth += options.boxPadding.left + options.boxPadding.right;\n        contentHeight += options.boxPadding.top + options.boxPadding.bottom;\n        textOffsetY += options.boxPadding.top;\n        svg += `<rect x=\"0\" y=\"0\" width=\"${contentWidth}\" height=\"${contentHeight}\"\n      stroke=\"${options.strokeColor}\" stroke-width=\"${options.strokeWidth}\"\n      fill=\"${options.backgroundColor}\"/>`;\n    } else if (node.borderType === \"WRound\") {\n        // 丸みを帯びた四角形\n        contentHeight += options.boxPadding.top + options.boxPadding.bottom;\n        textOffsetY += options.boxPadding.top;\n        const radius = contentHeight / 2; // 高さの半分を丸みの半径とする\n        contentWidth += contentHeight;\n        textOffsetX = radius;\n        svg += `<rect x=\"0\" y=\"0\" width=\"${contentWidth}\" height=\"${contentHeight}\"\n      rx=\"${radius}\" ry=\"${radius}\"\n      stroke=\"${options.strokeColor}\" stroke-width=\"${options.strokeWidth}\"\n      fill=\"${options.backgroundColor}\"/>`;\n    } else // ボーダーなし\n    contentWidth += options.boxPadding.left + options.boxPadding.right;\n    if (node.drawLeftBar) // 左側二重線\n    svg += $6b098df580cc3f14$var$renderLineSvg(options.doubleLineWidth, 0, options.doubleLineWidth, contentHeight, options);\n    if (node.drawRightBar) // 右側二重線\n    svg += $6b098df580cc3f14$var$renderLineSvg(contentWidth - options.doubleLineWidth, 0, contentWidth - options.doubleLineWidth, contentHeight, options);\n    svg += $6b098df580cc3f14$var$renderTextSvg(node.text, textOffsetX, textOffsetY, options);\n    let childFragment = null;\n    if (node.childNode) {\n        childFragment = $6b098df580cc3f14$var$renderNode(node.childNode, options);\n        svg += $6b098df580cc3f14$var$renderTransformTranslateSvg(options.childNodeOffsetWidth + contentWidth, 0, childFragment.svg);\n        svg += $6b098df580cc3f14$var$renderLineSvg(contentWidth, 0, options.childNodeOffsetWidth + contentWidth, 0, options);\n    }\n    const totalWidth = contentWidth + (childFragment ? childFragment.width + options.childNodeOffsetWidth : 0);\n    const totalHeight = Math.max(contentHeight, childFragment ? childFragment.height : 0);\n    return {\n        svg: svg,\n        width: totalWidth,\n        height: totalHeight,\n        type: node.type\n    };\n}\n/**\n * コメントノードの描画\n */ function $6b098df580cc3f14$var$renderCommentFragment(node, options) {\n    const boxNode = {\n        type: \"Comment\",\n        text: \"(\" + node.text + \")\",\n        childNode: null,\n        borderType: \"None\",\n        drawLeftBar: false,\n        drawRightBar: false\n    };\n    return $6b098df580cc3f14$var$renderBoxFragment(boxNode, options);\n}\n/**\n * ループノードの描画\n */ function $6b098df580cc3f14$var$renderLoopFragment(node, options) {\n    const boxNode = {\n        type: \"Loop\",\n        text: node.text,\n        childNode: node.childNode,\n        borderType: \"Box\",\n        drawLeftBar: node.isWhile,\n        drawRightBar: !node.isWhile\n    };\n    return $6b098df580cc3f14$var$renderBoxFragment(boxNode, options);\n}\n/**\n * 呼び出しノードの描画\n */ function $6b098df580cc3f14$var$renderCallFragment(node, options) {\n    const boxNode = {\n        type: \"Call\",\n        text: node.text,\n        childNode: node.childNode,\n        borderType: \"Box\",\n        drawLeftBar: true,\n        drawRightBar: true\n    };\n    return $6b098df580cc3f14$var$renderBoxFragment(boxNode, options);\n}\n/**\n * 処理ノードの描画\n */ function $6b098df580cc3f14$var$renderProcessFragment(node, options) {\n    const boxNode = {\n        type: \"Process\",\n        text: node.text,\n        childNode: node.childNode,\n        borderType: \"Box\",\n        drawLeftBar: false,\n        drawRightBar: false\n    };\n    return $6b098df580cc3f14$var$renderBoxFragment(boxNode, options);\n}\n/**\n * 端子ノードの描画\n */ function $6b098df580cc3f14$var$renderTerminalFragment(node, options) {\n    const boxNode = {\n        type: \"Terminal\",\n        text: node.text,\n        childNode: null,\n        borderType: \"WRound\",\n        drawLeftBar: false,\n        drawRightBar: false\n    };\n    return $6b098df580cc3f14$var$renderBoxFragment(boxNode, options);\n}\n// == Branchノードの描画関数群 ===\nfunction $6b098df580cc3f14$var$measureTextSvgForBranche(text, options) {\n    const textMetrics = $6b098df580cc3f14$var$measureTextSvg(text, options);\n    return {\n        width: textMetrics.width + options.branchePadding.left + options.branchePadding.right,\n        height: textMetrics.height + options.branchePadding.top + options.branchePadding.bottom\n    };\n}\nfunction $6b098df580cc3f14$var$renderTextSvgForBranche(text, posX, posY, options) {\n    return $6b098df580cc3f14$var$renderTextSvg(text, posX + options.branchePadding.left, posY + options.branchePadding.top, options);\n}\n/**\n * 分岐ノードの描画\n */ function $6b098df580cc3f14$var$renderBrancheFragment(node, options) {\n    // ケースの数が2未満の場合はダミーを追加する\n    if (node.branches.length < 2) while(node.branches.length < 2)node.branches.push({\n        label: \"\",\n        node: null\n    });\n    let svg = \"\";\n    const conditionSize = $6b098df580cc3f14$var$measureTextSvgForBranche(node.text, options);\n    const minHeight = conditionSize.height;\n    const x = 0;\n    const y = 0;\n    // labelw　<- ラベルの最大幅\n    // h <- ラベルと、サブビューの合計値\n    // subview <- サブビューの最大幅\n    let labelw = 0;\n    let subvieww = 0;\n    let h = 0;\n    let count = 0;\n    let lastdy = 0;\n    let lastldy = 0;\n    const brancheFragments = [];\n    const ymap = new Map();\n    for (const [index, branche] of node.branches.entries()){\n        const label = branche.label;\n        const labelSize = $6b098df580cc3f14$var$measureTextSvgForBranche(label, options);\n        const brancheFragment = branche.node ? $6b098df580cc3f14$var$renderNode(branche.node, options) : null;\n        // サブビューがない場合はサイズ = 0\n        const subViewSize = brancheFragment ? {\n            width: brancheFragment.width,\n            height: brancheFragment.height\n        } : {\n            width: 0,\n            height: 0\n        };\n        if (count !== node.branches.length - 1) subViewSize.height += options.nodeListSpace;\n        brancheFragments.push({\n            label: label,\n            fragment: brancheFragment\n        });\n        // ラベルの最大幅を更新\n        if (labelw < labelSize.width) labelw = labelSize.width;\n        // サブビューの最大幅を更新\n        if (subvieww < subViewSize.width) subvieww = subViewSize.width;\n        // ラベルに合わせて高さを更新\n        let uply, bottomly;\n        if (count === 0) {\n            uply = 0;\n            bottomly = labelSize.height;\n        } else if (count === node.branches.length - 1) {\n            uply = labelSize.height;\n            bottomly = 0;\n        } else {\n            uply = labelSize.height / 2;\n            bottomly = uply;\n        }\n        if (lastdy < uply) lastdy += uply - lastdy;\n        // ラベルが縦長い場合に調整\n        let minldy = lastldy > uply ? lastldy * 2 : uply * 2;\n        lastldy = bottomly;\n        if (minldy > lastdy) lastdy = minldy;\n        // 高さを更新\n        h += lastdy;\n        ymap.set(index, h);\n        // tmp <- 高さ追記分\n        if (bottomly > subViewSize.height) lastdy = bottomly;\n        else lastdy = subViewSize.height;\n        if (lastdy < minHeight && count < node.branches.length - 1) lastdy = minHeight;\n        count += 1;\n    }\n    h += lastdy;\n    // 描画\n    /**\n   * A-----B1\n   * |    /\n   * |   C2\n   * |    \\\n   * |     B2\n   * |    /\n   * |   C3\n   * |    \\\n   * E-----B3\n   */ let first = true;\n    let addChildLineWidth = false;\n    const poly = [];\n    let lasty = 0;\n    const boxRight = x + conditionSize.width + labelw + options.switchNodeCaseWidth;\n    poly.push({\n        x: x,\n        y: y\n    }); // Pos:A\n    for (const [index, brancheFragment] of brancheFragments.entries()){\n        const lh_temp = ymap.get(index);\n        const lh = lh_temp ? lh_temp : 0;\n        const ly = y + lh;\n        if (brancheFragment.fragment !== null) {\n            // brancheFragment.fragment の描画\n            svg += $6b098df580cc3f14$var$renderTransformTranslateSvg(boxRight + options.childNodeOffsetWidth, ly, brancheFragment.fragment.svg);\n            // 小要素への line の描画\n            svg += $6b098df580cc3f14$var$renderLineSvg(boxRight, ly, boxRight + options.childNodeOffsetWidth, ly, options);\n            // 小要素への line の分、最後に返す幅を増やす\n            addChildLineWidth = true;\n        }\n        if (!first) // Pos:C\n        poly.push({\n            x: boxRight - options.switchNodeCaseWidth,\n            y: (lasty + ly) / 2\n        });\n        poly.push({\n            x: boxRight,\n            y: ly\n        }); // Pos:B\n        first = false;\n        lasty = ly;\n    }\n    poly.push({\n        x: x,\n        y: lasty\n    }); // Pos:E\n    const polyPoints = poly.map((p)=>`${p.x},${p.y}`).join(\" \");\n    // polyの描画\n    svg += `<polygon points=\"${polyPoints}\"\n    stroke=\"${options.strokeColor}\"\n    stroke-width=\"${options.strokeWidth}\"\n    fill=\"${options.backgroundColor}\"/>`;\n    for (const [index, brancheFragment] of brancheFragments.entries()){\n        const label = brancheFragment.label;\n        const lh_temp = ymap.get(index);\n        const lh = lh_temp ? lh_temp : 0;\n        let ly = y + lh;\n        const ls = $6b098df580cc3f14$var$measureTextSvgForBranche(label, options);\n        if (index >= node.branches.length - 1) ly -= ls.height;\n        else if (index > 0) ly -= ls.height / 2;\n        // label の描画\n        svg += $6b098df580cc3f14$var$renderTextSvgForBranche(label, x + conditionSize.width + labelw - ls.width, ly, options);\n    }\n    // node.text の描画\n    svg += $6b098df580cc3f14$var$renderTextSvgForBranche(node.text, x, lasty / 2 - conditionSize.height / 2, options);\n    return {\n        svg: svg,\n        width: boxRight + subvieww + (addChildLineWidth ? options.childNodeOffsetWidth : 0),\n        height: h,\n        type: node.type\n    };\n}\n/**\n * SWITCH分岐ノードの描画\n */ function $6b098df580cc3f14$var$renderSwitchFragment(node, options) {\n    let switchBrancheNode = {\n        text: node.text,\n        type: \"Switch\",\n        branches: []\n    };\n    for (const [label, caseNode] of node.cases.entries())switchBrancheNode.branches.push({\n        label: label.toString(),\n        node: caseNode\n    });\n    return $6b098df580cc3f14$var$renderBrancheFragment(switchBrancheNode, options);\n}\n/**\n * IF分岐ノードの描画\n */ function $6b098df580cc3f14$var$renderIfFragment(node, options) {\n    let ifBrancheNode = {\n        text: node.text,\n        type: \"If\",\n        branches: []\n    };\n    if (node.trueNode) ifBrancheNode.branches.push({\n        label: \"\",\n        node: node.trueNode\n    });\n    else ifBrancheNode.branches.push({\n        label: \"\",\n        node: null\n    });\n    if (node.falseNode) ifBrancheNode.branches.push({\n        label: \"\",\n        node: node.falseNode\n    });\n    else ifBrancheNode.branches.push({\n        label: \"\",\n        node: null\n    });\n    return $6b098df580cc3f14$var$renderBrancheFragment(ifBrancheNode, options);\n}\n// == ノード間の接続線の描画関数群 ===\n/**\n * 連結ノード（NodeListNode）の描画\n */ function $6b098df580cc3f14$var$renderListFragment(node, options) {\n    let totalHeight = 0;\n    let maxWidth = 0;\n    let currentY = 0;\n    let childrenSvg = \"\";\n    const childFragments = [];\n    // 子ノードを再帰的に描画し、サイズとSVGを収集\n    for (const child of node.children){\n        const childFragment = $6b098df580cc3f14$var$renderNode(child, options);\n        childFragments.push(childFragment);\n        totalHeight += childFragment.height;\n        maxWidth = Math.max(maxWidth, childFragment.width);\n    }\n    // 子ノードのSVGを配置し、接続線を描画\n    for(let i = 0; i < childFragments.length; i++){\n        const childFragment = childFragments[i];\n        // const xOffset = (maxWidth - childFragment.width) / 2; // 中央揃え\n        childrenSvg += $6b098df580cc3f14$var$renderTransformTranslateSvg(0, currentY, childFragment.svg);\n        // 接続線を描画 (最後のノード以外)\n        if (i < childFragments.length - 1) {\n            let startY = 0;\n            let endY = 0;\n            if (childFragment.type === \"Terminal\") startY = currentY + childFragment.height / 2;\n            else startY = currentY;\n            if (childFragments[i + 1].type === \"Terminal\") endY = currentY + childFragment.height + options.nodeListSpace + childFragments[i + 1].height / 2;\n            else endY = currentY + childFragment.height + options.nodeListSpace + childFragments[i + 1].height;\n            childrenSvg += $6b098df580cc3f14$var$renderLineSvg(0, startY, 0, endY, options);\n            totalHeight += options.nodeListSpace;\n        }\n        currentY += childFragment.height + options.nodeListSpace;\n    }\n    return {\n        svg: childrenSvg,\n        width: maxWidth,\n        height: totalHeight,\n        type: \"NodeList\"\n    };\n}\n// == テキスト処理 ==\n/**\n * テキストのサイズを概算するヘルパー関数。\n * 全角文字と半角文字を考慮してテキストの幅を計算します。\n */ function $6b098df580cc3f14$var$measureTextSvg(text, options) {\n    const lines = text.split(\"\\n\");\n    const charWidth = options.fontSize; // 全角文字の幅を概算\n    const getCharWidth = (char)=>{\n        // 半角文字の正規表現\n        if (char.match(/^[\\u0000-\\u007e]*$/)) return 0.6;\n        // 全角文字\n        return 1.0;\n    };\n    const maxWidth = Math.max(...lines.map((line)=>{\n        let width = 0;\n        for (const char of line)width += getCharWidth(char);\n        return width * charWidth;\n    }));\n    const textHeight = lines.length * options.fontSize * options.lineHeight;\n    return {\n        width: maxWidth,\n        height: textHeight\n    };\n}\n/**\n * テキストをSVG形式で描画\n */ function $6b098df580cc3f14$var$renderTextSvg(text, posX, posY, options) {\n    const lines = text.split(\"\\n\");\n    let svg = \"\";\n    lines.forEach((line, index)=>{\n        const dy = index === 0 ? 0 : index * options.fontSize * options.lineHeight;\n        svg += `<text\n      x=\"${posX}\" y=\"${posY + options.fontSize}\" dy=\"${dy}\"\n      font-family=\"${options.fontFamily}\"\n      font-size=\"${options.fontSize}\"\n      fill=\"${options.textColor}\">${line}</text>`;\n    });\n    return svg;\n}\n// == 描画支援 ==\n/**\n * line描画支援\n */ function $6b098df580cc3f14$var$renderLineSvg(x1, y1, x2, y2, options) {\n    return `<line\n      x1=\"${x1}\" y1=\"${y1}\"\n      x2=\"${x2}\" y2=\"${y2}\"\n      stroke=\"${options.strokeColor}\"\n      stroke-width=\"${options.strokeWidth}\"\n    />`;\n}\n/**\n * 描画位置オフセット支援\n */ function $6b098df580cc3f14$var$renderTransformTranslateSvg(x, y, childSvg) {\n    return `<g transform=\"translate(${x}, ${y})\">${childSvg}</g>`;\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const spdInput = document.getElementById(\"spdInput\");\n    const svgOutput = document.getElementById(\"svgOutput\");\n    const fileInput = document.getElementById(\"fileInput\");\n    const downloadButton = document.getElementById(\"downloadButton\");\n    const downloadSvgButton = document.getElementById(\"downloadSvgButton\");\n    const convertAndRender = ()=>{\n        const spdText = spdInput.value;\n        try {\n            const ast = (0, $30ca700923f7cd7e$export$a372c43d1a7fd5d1).parse(spdText);\n            const svgString = (0, $6b098df580cc3f14$export$b3890eb0ae9dca99)(ast);\n            svgOutput.innerHTML = svgString;\n        } catch (error) {\n            svgOutput.innerHTML = `<p style=\"color: red;\">Error: ${error.message}</p>`;\n            console.error(\"SPD conversion error:\", error);\n        }\n    };\n    spdInput.addEventListener(\"input\", convertAndRender);\n    spdInput.addEventListener(\"keydown\", (event)=>{\n        if (event.key === \"Tab\") {\n            event.preventDefault(); // デフォルトのTabキーの動作（フォーカス移動）をキャンセル\n            const start = spdInput.selectionStart;\n            const end = spdInput.selectionEnd;\n            // タブ文字を挿入\n            spdInput.value = spdInput.value.substring(0, start) + \"\t\" + spdInput.value.substring(end);\n            // カーソル位置をタブの直後に設定\n            spdInput.selectionStart = spdInput.selectionEnd = start + 1;\n            convertAndRender(); // タブ挿入後も変換を実行\n        }\n    });\n    fileInput.addEventListener(\"change\", (event)=>{\n        const file = event.target.files?.[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = (e)=>{\n                spdInput.value = e.target?.result;\n                convertAndRender(); // ファイル読み込み後も変換を実行\n            };\n            reader.readAsText(file);\n        }\n    });\n    downloadButton.addEventListener(\"click\", ()=>{\n        const spdText = spdInput.value;\n        let fileName = prompt(\"\\u30C0\\u30A6\\u30F3\\u30ED\\u30FC\\u30C9\\u3059\\u308B\\u30D5\\u30A1\\u30A4\\u30EB\\u540D\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044:\", \"edited_spd.spd\");\n        if (fileName === null) return;\n        // 拡張子がない場合は.spdを追加\n        if (!fileName.endsWith(\".spd\")) fileName += \".spd\";\n        const blob = new Blob([\n            spdText\n        ], {\n            type: \"text/plain\"\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = fileName; // ユーザーが入力したファイル名を使用\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    });\n    downloadSvgButton.addEventListener(\"click\", ()=>{\n        const svgString = svgOutput.innerHTML;\n        if (!svgString) {\n            alert(\"SVG\\u304C\\u751F\\u6210\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\\u3002\");\n            return;\n        }\n        let fileName = prompt(\"\\u30C0\\u30A6\\u30F3\\u30ED\\u30FC\\u30C9\\u3059\\u308BSVG\\u30D5\\u30A1\\u30A4\\u30EB\\u540D\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044:\", \"output.svg\");\n        if (fileName === null) return;\n        // 拡張子がない場合は.svgを追加\n        if (!fileName.endsWith(\".svg\")) fileName += \".svg\";\n        const blob = new Blob([\n            svgString\n        ], {\n            type: \"image/svg+xml\"\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    });\n    // 初期表示用のサンプルSPDテキスト\n    spdInput.value = `:terminal START\n\n#\\u{30ED}\\u{30B8}\\u{30C3}\\u{30AF}\\u{3092}\\u{8A18}\\u{8FF0}\\u{3057}\\u{3066}\\u{304F}\\u{3060}\\u{3055}\\u{3044}\n\\u{30ED}\\u{30B8}\\u{30C3}\\u{30AF}\n\n:terminal END`;\n    convertAndRender(); // ページロード時に一度変換を実行\n});\n\n\n//# sourceMappingURL=web.957ebc9d.js.map\n","// web/src/main.ts\nimport { SPDParser } from \"../../src/spd/parser\";\nimport { render as renderSvg } from \"../../src/spd/svg-renderer\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const spdInput = document.getElementById(\"spdInput\") as HTMLTextAreaElement;\n  const svgOutput = document.getElementById(\"svgOutput\") as HTMLDivElement;\n  const fileInput = document.getElementById(\"fileInput\") as HTMLInputElement;\n  const downloadButton = document.getElementById(\"downloadButton\") as HTMLButtonElement;\n  const downloadSvgButton = document.getElementById(\"downloadSvgButton\") as HTMLButtonElement;\n\n  const convertAndRender = () => {\n    const spdText = spdInput.value;\n    try {\n      const ast = SPDParser.parse(spdText);\n      const svgString = renderSvg(ast);\n      svgOutput.innerHTML = svgString;\n    } catch (error: any) {\n      svgOutput.innerHTML = `<p style=\"color: red;\">Error: ${error.message}</p>`;\n      console.error(\"SPD conversion error:\", error);\n    }\n  };\n\n  spdInput.addEventListener(\"input\", convertAndRender);\n\n  spdInput.addEventListener(\"keydown\", (event) => {\n    if (event.key === \"Tab\") {\n      event.preventDefault(); // デフォルトのTabキーの動作（フォーカス移動）をキャンセル\n      const start = spdInput.selectionStart;\n      const end = spdInput.selectionEnd;\n\n      // タブ文字を挿入\n      spdInput.value = spdInput.value.substring(0, start) + \"\t\" + spdInput.value.substring(end);\n\n      // カーソル位置をタブの直後に設定\n      spdInput.selectionStart = spdInput.selectionEnd = start + 1;\n\n      convertAndRender(); // タブ挿入後も変換を実行\n    }\n  });\n\n  fileInput.addEventListener(\"change\", (event) => {\n    const file = (event.target as HTMLInputElement).files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        spdInput.value = e.target?.result as string;\n        convertAndRender(); // ファイル読み込み後も変換を実行\n      };\n      reader.readAsText(file);\n    }\n  });\n\n  downloadButton.addEventListener(\"click\", () => {\n    const spdText = spdInput.value;\n    let fileName = prompt(\"ダウンロードするファイル名を入力してください:\", \"edited_spd.spd\");\n\n    if (fileName === null) { // ユーザーがキャンセルした場合\n      return;\n    }\n\n    // 拡張子がない場合は.spdを追加\n    if (!fileName.endsWith(\".spd\")) {\n      fileName += \".spd\";\n    }\n\n    const blob = new Blob([spdText], { type: \"text/plain\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = fileName; // ユーザーが入力したファイル名を使用\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  });\n\n  downloadSvgButton.addEventListener(\"click\", () => {\n    const svgString = svgOutput.innerHTML;\n    if (!svgString) {\n      alert(\"SVGが生成されていません。\");\n      return;\n    }\n\n    let fileName = prompt(\"ダウンロードするSVGファイル名を入力してください:\", \"output.svg\");\n\n    if (fileName === null) { // ユーザーがキャンセルした場合\n      return;\n    }\n\n    // 拡張子がない場合は.svgを追加\n    if (!fileName.endsWith(\".svg\")) {\n      fileName += \".svg\";\n    }\n\n    const blob = new Blob([svgString], { type: \"image/svg+xml\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  });\n\n  // 初期表示用のサンプルSPDテキスト\n  spdInput.value = `:terminal START\\n\\n#ロジックを記述してください\\nロジック\\n\\n:terminal END`;\n  convertAndRender(); // ページロード時に一度変換を実行\n});\n","import {\n  CallNode,\n  CommentNode,\n  IfNode,\n  LoopNode,\n  Node,\n  NodeListNode,\n  ProcessNode,\n  SwitchNode,\n  TerminalNode,\n} from \"./ast\";\n\n// カスタムエラークラス群\nexport class ParseError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n// 引数が必要な場合にスローされる例外\nexport class RequireArgumentException extends ParseError {\n  constructor() {\n    super(\"このコマンドは引数が必要です\");\n  }\n}\n// 引数が不要な場合にスローされる例外\nexport class NotRequireArgumentException extends ParseError {\n  constructor() {\n    super(\"このコマンドに引数は不要です\");\n  }\n}\n// 不正なインデントの場合にスローされる例外\nexport class IllegalIndentException extends ParseError {\n  constructor() {\n    super(\"インデントの数が不正です\");\n  }\n}\n// 未知のコマンドの場合にスローされる例外\nexport class UnknownCommandException extends ParseError {\n  constructor() {\n    super(\"未知のコマンドです\");\n  }\n}\n// 予期しない:elseコマンドの場合にスローされる例外\nexport class UnexpectedElseException extends ParseError {\n  constructor() {\n    super(\"不適切なelseです\");\n  }\n}\n// 予期しない:caseコマンドの場合にスローされる例外\nexport class UnexpectedCaseException extends ParseError {\n  constructor() {\n    super(\"不適切なcaseが現れました\");\n  }\n}\n// :caseの値が重複している場合にスローされる例外\nexport class CaseDuplicateException extends ParseError {\n  constructor() {\n    super(\"既に同名のCaseが存在します\");\n  }\n}\n// 内部で予期しないエラーが発生した場合にスローされる例外\nexport class UnexpectedInnerException extends ParseError {\n  constructor(message: string) {\n    super(\"内部エラー:\" + message);\n  }\n}\n// 予期しないI/Oエラーが発生した場合にスローされる例外\nexport class UnexpectedIOException extends ParseError {\n  constructor() {\n    super(\"予期しないIOエラーが発生しました\");\n  }\n}\n\ntype ParseErrorReceiverFunction = (lineStr: string, lineNo: number, err: ParseError) => boolean;\n\n/**\n * パース中のコンテキストを扱うクラス。\n */\nclass Context {\n  // 親のコンテキスト\n  parent: Context | null = null;\n  // 深さ\n  depth = 0;\n  // ノードリスト\n  nodeList: Node[] = [];\n  // コンテキストの追加状態\n  optionStatus: \"Default\" | \"Else\" = \"Default\";\n  // コンテキストの状態に結びつく引数\n  optionArg: string | null = null;\n}\n\n/**\n * SPD (Simple PAD Description) フォーマットのパーサー。\n */\nexport class SPDParser {\n  // コメントを判定する正規表現オブジェクト\n  private static readonly patternComment = /^\\s*(#.*)?$/;\n\n  private static DummyParseErrorReceiver: ParseErrorReceiverFunction = (\n    // lineStr: string,\n    // lineNo: number,\n    // err: ParseError,\n  ): boolean => {\n    return false;\n  };\n\n  /**\n   * 本文を処理する\n   * @param context 現在のコンテキスト\n   * @param body 本文\n   */\n  private static handleBody(context: Context, body: string): void {\n    // 状態の制御\n    if (context.nodeList.length > 0) {\n      let lnode = context.nodeList[context.nodeList.length - 1];\n      if (context.optionArg != null && lnode.type === \"switch\") {\n        let node: SwitchNode = lnode;\n        node.cases.set(context.optionArg, null);\n        context.optionArg = null;\n      }\n    }\n\n    if (body.startsWith(\":\")) {\n      const parts = body.split(/[ \\t]+/);\n\n      // コマンド部分と引数部分を分離\n      const cmd = parts[0].substring(1); // コマンド名（例: \"call\", \"if\"）\n      const arg = parts.length > 1 ? body.substring(parts[0].length).trim() : null; // 引数\n\n      switch (cmd) {\n        case \"call\":\n          if (!arg) throw new RequireArgumentException();\n          context.nodeList.push({ type: \"call\", text: arg, childNode: null } as CallNode);\n          context.optionStatus = \"Default\";\n          context.optionArg = null;\n          break;\n        case \"terminal\":\n          if (!arg) throw new RequireArgumentException();\n          context.nodeList.push({ type: \"terminal\", text: arg } as TerminalNode);\n          context.optionStatus = \"Default\";\n          context.optionArg = null;\n          break;\n        case \"comment\":\n          if (!arg) throw new RequireArgumentException();\n          context.nodeList.push({ type: \"comment\", text: arg } as CommentNode);\n          context.optionStatus = \"Default\";\n          context.optionArg = null;\n          break;\n        case \"while\":\n          if (!arg) throw new RequireArgumentException();\n          context.nodeList.push({ type: \"loop\", isWhile: true, text: arg, childNode: null } as LoopNode);\n          context.optionStatus = \"Default\";\n          context.optionArg = null;\n          break;\n        case \"dowhile\":\n          if (!arg) throw new RequireArgumentException();\n          context.nodeList.push({ type: \"loop\", isWhile: false, text: arg, childNode: null } as LoopNode);\n          context.optionStatus = \"Default\";\n          context.optionArg = null;\n          break;\n        case \"if\":\n          if (!arg) throw new RequireArgumentException();\n          context.nodeList.push({ type: \"if\", text: arg, trueNode: null, falseNode: null } as IfNode);\n          context.optionStatus = \"Default\";\n          context.optionArg = null;\n          break;\n        case \"switch\":\n          if (!arg) throw new RequireArgumentException();\n          context.nodeList.push({ type: \"switch\", text: arg, cases: new Map<string, Node | null>() } as SwitchNode);\n          context.optionStatus = \"Default\";\n          context.optionArg = null;\n          break;\n        case \"else\":\n          const lastIfNode = context.nodeList.length === 0 ? null : context.nodeList[context.nodeList.length - 1];\n          if (lastIfNode === null || lastIfNode.type !== \"if\") {\n            throw new UnexpectedElseException();\n          }\n          if (arg !== null) {\n            throw new NotRequireArgumentException();\n          }\n          context.optionStatus = \"Else\";\n          context.optionArg = null;\n          break;\n        case \"case\":\n          const lastSwitchNode = context.nodeList.length === 0 ? null : context.nodeList[context.nodeList.length - 1];\n          if (lastSwitchNode === null || lastSwitchNode.type !== \"switch\") {\n            throw new UnexpectedCaseException();\n          }\n          if (!arg) throw new RequireArgumentException();\n          if (lastSwitchNode.cases.has(arg)) {\n            throw new CaseDuplicateException();\n          }\n          context.optionStatus = \"Default\";\n          context.optionArg = arg;\n          break;\n        default:\n          throw new UnknownCommandException();\n      }\n    } else {\n      context.nodeList.push({ type: \"process\", text: body, childNode: null } as ProcessNode);\n      context.optionStatus = \"Default\";\n      context.optionArg = null;\n    }\n  }\n\n  /**\n   * 現在のコンテキストを確定し、親コンテキストに移動します。\n   * @param context 現在のコンテキスト。\n   * @returns 親コンテキスト。\n   */\n  private static upToParent(context: Context | null): Context | null {\n    if (context === null) return null;\n\n    // 状態の制御\n    if (context.nodeList.length > 0) {\n      let lnode = context.nodeList[context.nodeList.length - 1];\n      if (context.optionArg != null && lnode.type === \"switch\") {\n        let node: SwitchNode = lnode as SwitchNode;\n        node.cases.set(context.optionArg, null);\n        context.optionArg = null;\n      }\n    }\n\n    if (context.parent === null) return null;\n\n    // 追加するノードを新規作成。\n    let newNode: Node | NodeListNode | null = null;\n    if (context.nodeList.length == 0) {\n      return context.parent;\n    } else if (context.nodeList.length == 1) {\n      newNode = context.nodeList[0];\n    } else if (context.nodeList.length > 1) {\n      let nodeList = { type: \"nodeList\", children: [] } as NodeListNode;\n      for (let i = 0; i < context.nodeList.length; i++) {\n        nodeList.children.push(context.nodeList[i]);\n      }\n      newNode = nodeList;\n    } else {\n      throw new UnexpectedInnerException(\"Parent node is not found\");\n    }\n\n    // ノードの追加先となるノード。\n    let pnode = context.parent.nodeList[context.parent.nodeList.length - 1];\n\n    // ノードの種類に応じてノードの追加先に追加。\n    switch (pnode.type) {\n      case \"process\":\n        let processNode = pnode as ProcessNode;\n        processNode.childNode = newNode;\n        break;\n      case \"loop\":\n        let loopNode = pnode as LoopNode;\n        loopNode.childNode = newNode;\n        break;\n      case \"call\":\n        let callNode = pnode as CallNode;\n        callNode.childNode = newNode;\n        break;\n      case \"switch\":\n        let snode = pnode as SwitchNode;\n        snode.cases.set(context.parent.optionArg!, newNode);\n        break;\n      case \"if\":\n        let ifnode = pnode as IfNode;\n        if (context.parent.optionStatus === \"Default\") {\n          ifnode.trueNode = newNode;\n        } else if (context.parent.optionStatus === \"Else\") {\n          if (ifnode.falseNode !== null) {\n            throw new UnexpectedElseException();\n          } else {\n            ifnode.falseNode = newNode;\n          }\n        } else {\n          throw new UnexpectedInnerException(\"Illegal option status\");\n        }\n        break;\n      default:\n        throw new UnexpectedInnerException(\"Illegal command\");\n    }\n\n    // 親ノードの状態をリセットする。\n    context.parent.optionStatus = \"Default\";\n    context.parent.optionArg = null;\n\n    // 親ノードを返す。\n    return context.parent;\n  }\n\n  /**\n   * SPDフォーマットの文字列をPADモデル（AST）にパースします。\n   * @param src SPDフォーマットの文字列。\n   * @returns パースされたASTのルートノード。\n   */\n  public static parse(src: string, exr: ParseErrorReceiverFunction = SPDParser.DummyParseErrorReceiver): Node | null {\n    // if(src == null) throw new IllegalArgumentException(\"src is null\"); // # diff TypeScriptではnullチェックは不要\n\n    // 先頭のコンテキスト\n    const rootContext = new Context();\n    // 現在のコンテキスト\n    let context: Context | null = rootContext;\n\n    // 終了フラグ\n    let errExit = false;\n\n    // １行づつ読み込む\n    // ソースコードを行ごとに分割\n    const lines = src.split(/\\r?\\n/);\n    let lineNo = 0; // 現在の行番号\n\n    try {\n      while (lineNo < lines.length) {\n        let line = lines[lineNo];\n        lineNo++;\n\n        // コメント行は読み飛ばし\n        if (SPDParser.patternComment.test(line)) continue;\n\n        // 先頭のタブ数を数える。\n        let tabNum = 0;\n        for (let i = 0; i < line.length; ++i) {\n          if (line.charAt(i) === \"\\t\") {\n            tabNum++;\n          } else {\n            break;\n          }\n        }\n\n        try {\n          if (context === null) {\n            throw new IllegalIndentException();\n          }\n\n          // 子コンテキストの作成処理を行う。\n          if ((tabNum > 0 && context.nodeList.length == 0) || tabNum < 0) {\n            // 最初からタブがある場合は不正。\n            throw new IllegalIndentException();\n          }\n          if (tabNum > context.depth) {\n            // タブが増加した場合の処理\n\n            // 正当性をチェックする。\n            let parentNode = context.nodeList[context.nodeList.length - 1];\n            if (tabNum > context.depth + 1 || (parentNode && parentNode.type === \"comment\")) {\n              // 親がコメントか２階層以上離れているのは不正。\n              throw new IllegalIndentException();\n            }\n            if (parentNode.type === \"switch\" && context.optionArg == null) {\n              // 子を持たないタイプの場合は不正。\n              throw new IllegalIndentException();\n            }\n\n            // 子コンテキストを生成する。\n            let newContext = new Context();\n            newContext.parent = context;\n            newContext.depth = context.depth + 1;\n            context = newContext;\n          }\n\n          // タブが減少した際の処理\n          while (tabNum < context.depth) {\n            context = SPDParser.upToParent(context);\n            if (context === null) {\n              throw new IllegalIndentException();\n            }\n          }\n\n          // 本文は行のデータをtrimしたものとする。\n          // 行末が @ の場合は複数行扱いとする。\n          let body = line.substring(tabNum); // タブの後の本体部分を抽出\n          if (body.endsWith(\"@\")) {\n            let multiLineContent = body.substring(0, body.length - 1);\n            while (lineNo < lines.length) {\n              let nextLine = lines[lineNo];\n              lineNo++;\n\n              // コメント行で止まる\n              if (SPDParser.patternComment.test(nextLine)) continue;\n\n              // 行末に @ が間読み込む\n              // 行末に @ がある間読み込む\n              let nextLineTabNum = 0;\n              for (let i = 0; i < nextLine.length; ++i) {\n                if (nextLine.charAt(i) === \"\\t\") {\n                  nextLineTabNum++;\n                } else {\n                  break;\n                }\n              }\n              let nextLineBody = nextLine.substring(nextLineTabNum);\n\n              if (nextLineBody.endsWith(\"@\")) {\n                multiLineContent += \"\\n\" + nextLineBody.substring(0, nextLineBody.length - 1);\n              } else {\n                multiLineContent += \"\\n\" + nextLineBody;\n                break;\n              }\n            }\n            body = multiLineContent;\n          }\n          body = body.replace(/@/g, \"\\n\");\n\n          // 本文を処理する。\n          SPDParser.handleBody(context!, body);\n        } catch (ex) {\n          if (ex instanceof ParseError) {\n            if (exr(line, lineNo - 1, ex)) {\n              continue;\n            } else {\n              throw ex;\n            }\n          } else {\n            throw ex;\n          }\n        }\n      }\n\n      // 先頭まで戻る\n      while (!errExit && context != null) {\n        context = SPDParser.upToParent(context);\n      }\n    } catch (ex) {\n      if (ex instanceof ParseError) {\n        throw ex; // テストと適切なエラーハンドリングのためにParseErrorを再スロー\n      } else {\n        console.error(`行 ${lineNo} で予期しないエラーが発生しました: ${ex}`);\n        throw new ParseError(`予期しないエラー: ${ex}`); // その他のエラーをラップ\n      }\n    }\n\n    // 途中で解析が終了した場合は、nullを返す。\n    if (errExit) return null;\n\n    // モデルを最終化して返す\n    if (rootContext.nodeList.length === 0) {\n      return null;\n    }\n    const topNode: NodeListNode = { type: \"nodeList\", children: rootContext.nodeList };\n    return topNode;\n  }\n}\n","import {\n  CallNode,\n  CommentNode,\n  IfNode,\n  LoopNode,\n  Node,\n  NodeListNode,\n  ProcessNode,\n  SwitchNode,\n  TerminalNode,\n} from \"./ast\";\n\ntype Branch = {\n  label: string;\n  node: Node | null;\n};\n\ntype BrancheNode = {\n  text: string;\n  type: \"If\" | \"Switch\";\n  branches: Branch[];\n};\n\ntype BoxNode = {\n  type: \"Comment\" | \"Process\" | \"Call\" | \"Loop\" | \"Terminal\";\n  text: string;\n  childNode: Node | null;\n  borderType: \"None\" | \"Box\" | \"WRound\";\n  drawLeftBar: boolean;\n  drawRightBar: boolean;\n};\n\n/**\n * 描画に関する設定をまとめたオブジェクト\n */\ninterface RenderOptions {\n  fontSize: number;\n  fontFamily: string;\n  margin: { top: number; right: number; bottom: number; left: number };\n  boxPadding: { top: number; right: number; bottom: number; left: number };\n  branchePadding: { top: number; right: number; bottom: number; left: number };\n  strokeWidth: number;\n  strokeColor: string;\n  backgroundColor: string;\n  textColor: string;\n  lineHeight: number;\n  doubleLineWidth: number; // 二重線の幅\n  switchNodeCaseWidth: number; // 分岐記号のギザギザの幅\n  connectorWidth: number; // 子ノードとの接続線幅\n  nodeListSpace: number; // ノードListNodeの子ノード間のスペース\n  childNodeOffsetWidth: number;\n}\n\n/**\n * 描画結果の中間表現\n * 各ノードを描画した結果、生成されるSVG文字列と、レイアウト計算に必要なサイズ情報を保持\n */\ninterface ViewFragment {\n  svg: string; // 生成されたSVG要素の文字列\n  width: number; // 全体の幅\n  height: number; // 全体の高さ\n  type: \"Process\" | \"Terminal\" | \"NodeList\" | \"Call\" | \"Loop\" | \"If\" | \"Switch\" | \"Comment\" | \"Unknown\"; // ノードのタイプ\n}\n\n// デフォルトの描画オプション\nconst defaultRenderOptions: RenderOptions = {\n  fontSize: 14,\n  fontFamily: \"sans-serif\",\n  margin: { top: 20, right: 20, bottom: 20, left: 20 },\n  boxPadding: { top: 10, right: 10, bottom: 10, left: 10 },\n  branchePadding: { top: 5, right: 5, bottom: 5, left: 5 },\n  strokeWidth: 1,\n  strokeColor: \"#000000\",\n  backgroundColor: \"#ffffff\",\n  textColor: \"#000000\",\n  lineHeight: 1.2,\n  doubleLineWidth: 5,\n  switchNodeCaseWidth: 20,\n  connectorWidth: 2,\n  nodeListSpace: 10,\n  childNodeOffsetWidth: 20,\n};\n\n/**\n * ASTを受け取り、完全なSVG文字列を返す\n */\nexport function render(node: Node | null, options?: Partial<RenderOptions>): string {\n  const mergedOptions: RenderOptions = { ...defaultRenderOptions, ...options };\n\n  if (!node) {\n    return \"\";\n  }\n\n  const fragment = renderNode(node, mergedOptions);\n\n  const svgWidth = fragment.width + mergedOptions.margin.left + mergedOptions.margin.right;\n  const svgHeight = fragment.height + mergedOptions.margin.top + mergedOptions.margin.bottom;\n\n  let svg = `<svg `;\n  svg += `width=\"${svgWidth}\" height=\"${svgHeight}\" `;\n  svg += `viewBox=\"0 0 ${svgWidth} ${svgHeight}\" `;\n  svg += `xmlns=\"http://www.w3.org/2000/svg\">`;\n  svg += `<rect x=\"0\" y=\"0\" `;\n  svg += `width=\"${svgWidth}\" height=\"${svgHeight}\" `;\n  svg += `fill=\"${mergedOptions.backgroundColor}\"/>`;\n  svg += renderTransformTranslateSvg(\n    mergedOptions.margin.left,\n    mergedOptions.margin.top,\n    fragment.svg,\n  );\n  svg += `</svg>`;\n\n  return svg;\n}\n\n/**\n * ASTのノード種別に応じて、対応する描画関数を呼び出す\n */\nfunction renderNode(node: Node, options: RenderOptions): ViewFragment {\n  switch (node.type) {\n    case \"process\":\n      return renderProcessFragment(node, options);\n    case \"terminal\":\n      return renderTerminalFragment(node, options);\n    case \"nodeList\":\n      return renderListFragment(node, options);\n    case \"call\":\n      return renderCallFragment(node, options);\n    case \"loop\":\n      return renderLoopFragment(node, options);\n    case \"if\":\n      return renderIfFragment(node, options);\n    case \"switch\":\n      return renderSwitchFragment(node, options);\n    case \"comment\":\n      return renderCommentFragment(node, options);\n    // 他のノードタイプは後で追加\n    default:\n      return { svg: \"\", width: 0, height: 0, type: \"Unknown\" }; // 未実装のノードタイプ\n  }\n}\n\n/**\n * 箱型ノードの描画処理\n */\nfunction renderBoxFragment(node: BoxNode, options: RenderOptions): ViewFragment {\n  const textMetrics = measureTextSvg(node.text, options);\n  let contentWidth = textMetrics.width;\n  let contentHeight = textMetrics.height;\n  let textOffsetX = options.boxPadding.left;\n  let textOffsetY = 0;\n\n  let svg = ``;\n\n  if (node.borderType === \"Box\") {\n    // 四角形のボックス\n    contentWidth += options.boxPadding.left + options.boxPadding.right;\n    contentHeight += options.boxPadding.top + options.boxPadding.bottom;\n    textOffsetY += options.boxPadding.top;\n    svg += `<rect x=\"0\" y=\"0\" width=\"${contentWidth}\" height=\"${contentHeight}\"\n      stroke=\"${options.strokeColor}\" stroke-width=\"${options.strokeWidth}\"\n      fill=\"${options.backgroundColor}\"/>`;\n  } else if (node.borderType === \"WRound\") {\n    // 丸みを帯びた四角形\n    contentHeight += options.boxPadding.top + options.boxPadding.bottom;\n    textOffsetY += options.boxPadding.top;\n    const radius = contentHeight / 2; // 高さの半分を丸みの半径とする\n    contentWidth += contentHeight;\n    textOffsetX = radius;\n    svg += `<rect x=\"0\" y=\"0\" width=\"${contentWidth}\" height=\"${contentHeight}\"\n      rx=\"${radius}\" ry=\"${radius}\"\n      stroke=\"${options.strokeColor}\" stroke-width=\"${options.strokeWidth}\"\n      fill=\"${options.backgroundColor}\"/>`;\n  } else {\n    // ボーダーなし\n    contentWidth += options.boxPadding.left + options.boxPadding.right;\n  }\n\n  if (node.drawLeftBar) {\n    // 左側二重線\n    svg += renderLineSvg(\n      options.doubleLineWidth,\n      0,\n      options.doubleLineWidth,\n      contentHeight,\n      options,\n    );\n  }\n  if (node.drawRightBar) {\n    // 右側二重線\n    svg += renderLineSvg(\n      contentWidth - options.doubleLineWidth,\n      0,\n      contentWidth - options.doubleLineWidth,\n      contentHeight,\n      options,\n    );\n  }\n\n  svg += renderTextSvg(\n    node.text,\n    textOffsetX,\n    textOffsetY,\n    options,\n  );\n\n  let childFragment: ViewFragment | null = null;\n  if (node.childNode) {\n    childFragment = renderNode(node.childNode, options);\n    svg += renderTransformTranslateSvg(\n      options.childNodeOffsetWidth + contentWidth,\n      0,\n      childFragment.svg,\n    );\n    svg += renderLineSvg(contentWidth, 0, options.childNodeOffsetWidth + contentWidth, 0, options);\n  }\n  const totalWidth = contentWidth + (childFragment ? childFragment.width + options.childNodeOffsetWidth : 0);\n  const totalHeight = Math.max(contentHeight, childFragment ? childFragment.height : 0);\n\n  return {\n    svg: svg,\n    width: totalWidth,\n    height: totalHeight,\n    type: node.type,\n  };\n}\n\n/**\n * コメントノードの描画\n */\nfunction renderCommentFragment(node: CommentNode, options: RenderOptions): ViewFragment {\n  const boxNode: BoxNode = {\n    type: \"Comment\",\n    text: \"(\" + node.text + \")\",\n    childNode: null,\n    borderType: \"None\",\n    drawLeftBar: false,\n    drawRightBar: false,\n  };\n  return renderBoxFragment(boxNode, options);\n}\n\n/**\n * ループノードの描画\n */\nfunction renderLoopFragment(node: LoopNode, options: RenderOptions): ViewFragment {\n  const boxNode: BoxNode = {\n    type: \"Loop\",\n    text: node.text,\n    childNode: node.childNode,\n    borderType: \"Box\",\n    drawLeftBar: node.isWhile, // Whileループは左側に二重線を描画\n    drawRightBar: !node.isWhile, // Do-Whileループは右側に二重線を描画\n  };\n  return renderBoxFragment(boxNode, options);\n}\n\n/**\n * 呼び出しノードの描画\n */\nfunction renderCallFragment(node: CallNode, options: RenderOptions): ViewFragment {\n  const boxNode: BoxNode = {\n    type: \"Call\",\n    text: node.text,\n    childNode: node.childNode,\n    borderType: \"Box\",\n    drawLeftBar: true,\n    drawRightBar: true,\n  };\n  return renderBoxFragment(boxNode, options);\n}\n\n/**\n * 処理ノードの描画\n */\nfunction renderProcessFragment(node: ProcessNode, options: RenderOptions): ViewFragment {\n  const boxNode: BoxNode = {\n    type: \"Process\",\n    text: node.text,\n    childNode: node.childNode,\n    borderType: \"Box\",\n    drawLeftBar: false,\n    drawRightBar: false,\n  };\n  return renderBoxFragment(boxNode, options);\n}\n\n/**\n * 端子ノードの描画\n */\nfunction renderTerminalFragment(node: TerminalNode, options: RenderOptions): ViewFragment {\n  const boxNode: BoxNode = {\n    type: \"Terminal\",\n    text: node.text,\n    childNode: null,\n    borderType: \"WRound\",\n    drawLeftBar: false,\n    drawRightBar: false,\n  };\n  return renderBoxFragment(boxNode, options);\n}\n\n// == Branchノードの描画関数群 ===\n\nfunction measureTextSvgForBranche(\n  text: string,\n  options: RenderOptions,\n): { width: number; height: number } {\n  const textMetrics = measureTextSvg(text, options);\n  return {\n    width: textMetrics.width + options.branchePadding.left + options.branchePadding.right,\n    height: textMetrics.height + options.branchePadding.top + options.branchePadding.bottom,\n  };\n}\n\nfunction renderTextSvgForBranche(\n  text: string,\n  posX: number,\n  posY: number,\n  options: RenderOptions,\n): string {\n  return renderTextSvg(\n    text,\n    posX + options.branchePadding.left,\n    posY + options.branchePadding.top,\n    options,\n  );\n}\n\n/**\n * 分岐ノードの描画\n */\nfunction renderBrancheFragment(node: BrancheNode, options: RenderOptions): ViewFragment {\n  // ケースの数が2未満の場合はダミーを追加する\n  if (node.branches.length < 2) {\n    while (node.branches.length < 2) {\n      node.branches.push({ label: \"\", node: null });\n    }\n  }\n\n  let svg = \"\";\n\n  const conditionSize = measureTextSvgForBranche(node.text, options);\n  const minHeight = conditionSize.height;\n\n  const x = 0;\n  const y = 0;\n\n  // labelw　<- ラベルの最大幅\n  // h <- ラベルと、サブビューの合計値\n  // subview <- サブビューの最大幅\n  let labelw = 0;\n  let subvieww = 0;\n  let h = 0;\n\n  let count = 0;\n  let lastdy = 0;\n  let lastldy = 0;\n  const brancheFragments: { label: string; fragment: ViewFragment | null }[] = [];\n  const ymap = new Map<number, number>();\n  for (const [index, branche] of node.branches.entries()) {\n    const label = branche.label;\n    const labelSize = measureTextSvgForBranche(label, options);\n    const brancheFragment = branche.node ? renderNode(branche.node, options) : null;\n\n    // サブビューがない場合はサイズ = 0\n    const subViewSize = brancheFragment\n      ? { width: brancheFragment.width, height: brancheFragment.height }\n      : { width: 0, height: 0 };\n\n    if (count !== node.branches.length - 1) {\n      subViewSize.height += options.nodeListSpace;\n    }\n\n    brancheFragments.push({ label: label, fragment: brancheFragment });\n\n    // ラベルの最大幅を更新\n    if (labelw < labelSize.width) labelw = labelSize.width;\n\n    // サブビューの最大幅を更新\n    if (subvieww < subViewSize.width) subvieww = subViewSize.width;\n\n    // ラベルに合わせて高さを更新\n    let uply: number, bottomly: number;\n    if (count === 0) {\n      uply = 0;\n      bottomly = labelSize.height;\n    } else if (count === node.branches.length - 1) {\n      uply = labelSize.height;\n      bottomly = 0;\n    } else {\n      uply = labelSize.height / 2;\n      bottomly = uply;\n    }\n    if (lastdy < uply) lastdy += uply - lastdy;\n\n    // ラベルが縦長い場合に調整\n    let minldy = lastldy > uply ? (lastldy * 2) : (uply * 2);\n    lastldy = bottomly;\n    if (minldy > lastdy) lastdy = minldy;\n\n    // 高さを更新\n    h += lastdy;\n    ymap.set(index, h);\n\n    // tmp <- 高さ追記分\n    if (bottomly > subViewSize.height) {\n      lastdy = bottomly;\n    } else {\n      lastdy = subViewSize.height;\n    }\n    if (lastdy < minHeight && count < node.branches.length - 1) lastdy = minHeight;\n\n    count += 1;\n  }\n\n  h += lastdy;\n\n  // 描画\n\n  /**\n   * A-----B1\n   * |    /\n   * |   C2\n   * |    \\\n   * |     B2\n   * |    /\n   * |   C3\n   * |    \\\n   * E-----B3\n   */\n  let first = true;\n  let addChildLineWidth = false;\n  const poly: { x: number; y: number }[] = [];\n  let lasty = 0;\n  const boxRight = x + conditionSize.width + labelw + options.switchNodeCaseWidth;\n  poly.push({ x: x, y: y }); // Pos:A\n  for (const [index, brancheFragment] of brancheFragments.entries()) {\n    const lh_temp = ymap.get(index);\n    const lh = lh_temp ? lh_temp : 0;\n    const ly = y + lh;\n\n    if (brancheFragment.fragment !== null) {\n      // brancheFragment.fragment の描画\n      svg += renderTransformTranslateSvg(\n        boxRight + options.childNodeOffsetWidth,\n        ly,\n        brancheFragment.fragment.svg,\n      );\n      // 小要素への line の描画\n      svg += renderLineSvg(\n        boxRight,\n        ly,\n        boxRight + options.childNodeOffsetWidth,\n        ly,\n        options,\n      );\n      // 小要素への line の分、最後に返す幅を増やす\n      addChildLineWidth = true;\n    }\n\n    if (!first) {\n      // Pos:C\n      poly.push({\n        x: boxRight - options.switchNodeCaseWidth,\n        y: (lasty + ly) / 2,\n      });\n    }\n    poly.push({ x: boxRight, y: ly }); // Pos:B\n    first = false;\n    lasty = ly;\n  }\n  poly.push({ x: x, y: lasty }); // Pos:E\n\n  const polyPoints = poly.map((p) => `${p.x},${p.y}`).join(\" \");\n\n  // polyの描画\n  svg += `<polygon points=\"${polyPoints}\"\n    stroke=\"${options.strokeColor}\"\n    stroke-width=\"${options.strokeWidth}\"\n    fill=\"${options.backgroundColor}\"/>`;\n\n  for (const [index, brancheFragment] of brancheFragments.entries()) {\n    const label = brancheFragment.label;\n    const lh_temp = ymap.get(index);\n    const lh = lh_temp ? lh_temp : 0;\n    let ly = y + lh;\n\n    const ls = measureTextSvgForBranche(label, options);\n\n    if (index >= node.branches.length - 1) {\n      ly -= ls.height;\n    } else if (index > 0) {\n      ly -= ls.height / 2;\n    }\n\n    // label の描画\n    svg += renderTextSvgForBranche(\n      label,\n      x + conditionSize.width + labelw - ls.width,\n      ly,\n      options,\n    );\n  }\n\n  // node.text の描画\n  svg += renderTextSvgForBranche(\n    node.text,\n    x,\n    lasty / 2 - conditionSize.height / 2,\n    options,\n  );\n\n  return {\n    svg: svg,\n    width: boxRight + subvieww + (addChildLineWidth ? options.childNodeOffsetWidth : 0),\n    height: h,\n    type: node.type,\n  };\n}\n\n/**\n * SWITCH分岐ノードの描画\n */\nfunction renderSwitchFragment(node: SwitchNode, options: RenderOptions): ViewFragment {\n  let switchBrancheNode: BrancheNode = {\n    text: node.text,\n    type: \"Switch\",\n    branches: [],\n  };\n\n  for (const [label, caseNode] of node.cases.entries()) {\n    switchBrancheNode.branches.push({ label: label.toString(), node: caseNode });\n  }\n\n  return renderBrancheFragment(switchBrancheNode, options);\n}\n\n/**\n * IF分岐ノードの描画\n */\nfunction renderIfFragment(node: IfNode, options: RenderOptions): ViewFragment {\n  let ifBrancheNode: BrancheNode = {\n    text: node.text,\n    type: \"If\",\n    branches: [],\n  };\n\n  if (node.trueNode) {\n    ifBrancheNode.branches.push({ label: \"\", node: node.trueNode });\n  } else {\n    ifBrancheNode.branches.push({ label: \"\", node: null });\n  }\n\n  if (node.falseNode) {\n    ifBrancheNode.branches.push({ label: \"\", node: node.falseNode });\n  } else {\n    ifBrancheNode.branches.push({ label: \"\", node: null });\n  }\n\n  return renderBrancheFragment(ifBrancheNode, options);\n}\n\n// == ノード間の接続線の描画関数群 ===\n\n/**\n * 連結ノード（NodeListNode）の描画\n */\nfunction renderListFragment(node: NodeListNode, options: RenderOptions): ViewFragment {\n  let totalHeight = 0;\n  let maxWidth = 0;\n  let currentY = 0;\n  let childrenSvg = \"\";\n  const childFragments: ViewFragment[] = [];\n\n  // 子ノードを再帰的に描画し、サイズとSVGを収集\n  for (const child of node.children) {\n    const childFragment = renderNode(child, options);\n    childFragments.push(childFragment);\n    totalHeight += childFragment.height;\n    maxWidth = Math.max(maxWidth, childFragment.width);\n  }\n\n  // 子ノードのSVGを配置し、接続線を描画\n  for (let i = 0; i < childFragments.length; i++) {\n    const childFragment = childFragments[i];\n    // const xOffset = (maxWidth - childFragment.width) / 2; // 中央揃え\n    childrenSvg += renderTransformTranslateSvg(\n      0,\n      currentY,\n      childFragment.svg,\n    );\n\n    // 接続線を描画 (最後のノード以外)\n    if (i < childFragments.length - 1) {\n      let startY = 0;\n      let endY = 0;\n      if (childFragment.type === \"Terminal\") {\n        startY = currentY + childFragment.height / 2;\n      } else {\n        startY = currentY;\n      }\n      if (childFragments[i + 1].type === \"Terminal\") {\n        endY = currentY + childFragment.height + options.nodeListSpace + childFragments[i + 1].height / 2;\n      } else {\n        endY = currentY + childFragment.height + options.nodeListSpace + childFragments[i + 1].height;\n      }\n      childrenSvg += renderLineSvg(0, startY, 0, endY, options);\n      totalHeight += options.nodeListSpace;\n    }\n    currentY += childFragment.height + options.nodeListSpace;\n  }\n\n  return {\n    svg: childrenSvg,\n    width: maxWidth,\n    height: totalHeight,\n    type: \"NodeList\",\n  };\n}\n\n// == テキスト処理 ==\n\n/**\n * テキストのサイズを概算するヘルパー関数。\n * 全角文字と半角文字を考慮してテキストの幅を計算します。\n */\nfunction measureTextSvg(\n  text: string,\n  options: RenderOptions,\n): { width: number; height: number } {\n  const lines = text.split(\"\\n\");\n  const charWidth = options.fontSize; // 全角文字の幅を概算\n\n  const getCharWidth = (char: string): number => {\n    // 半角文字の正規表現\n     \n    if (char.match(/^[\\u0000-\\u007e]*$/)) {\n      return 0.6;\n    }\n    // 全角文字\n    return 1.0;\n  };\n\n  const maxWidth = Math.max(\n    ...lines.map((line) => {\n      let width = 0;\n      for (const char of line) {\n        width += getCharWidth(char);\n      }\n      return width * charWidth;\n    }),\n  );\n\n  const textHeight = lines.length * options.fontSize * options.lineHeight;\n  return { width: maxWidth, height: textHeight };\n}\n\n/**\n * テキストをSVG形式で描画\n */\nfunction renderTextSvg(\n  text: string,\n  posX: number,\n  posY: number,\n  options: RenderOptions,\n): string {\n  const lines = text.split(\"\\n\");\n  let svg = \"\";\n  lines.forEach((line, index) => {\n    const dy = index === 0 ? 0 : index * options.fontSize * options.lineHeight;\n    svg += `<text\n      x=\"${posX}\" y=\"${posY + options.fontSize}\" dy=\"${dy}\"\n      font-family=\"${options.fontFamily}\"\n      font-size=\"${options.fontSize}\"\n      fill=\"${options.textColor}\">${line}</text>`;\n  });\n  return svg;\n}\n\n// == 描画支援 ==\n\n/**\n * line描画支援\n */\nfunction renderLineSvg(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  options: RenderOptions,\n): string {\n  return `<line\n      x1=\"${x1}\" y1=\"${y1}\"\n      x2=\"${x2}\" y2=\"${y2}\"\n      stroke=\"${options.strokeColor}\"\n      stroke-width=\"${options.strokeWidth}\"\n    />`;\n}\n\n/**\n * 描画位置オフセット支援\n */\nfunction renderTransformTranslateSvg(\n  x: number,\n  y: number,\n  childSvg: string,\n): string {\n  return `<g transform=\"translate(${x}, ${y})\">${childSvg}</g>`;\n}\n"],"names":["$30ca700923f7cd7e$export$f9c837a54db411d","Error","message","name","$30ca700923f7cd7e$export$eaf10ed6e5991cf8","$30ca700923f7cd7e$export$1d21b533e0dc3eed","$30ca700923f7cd7e$export$d0be8b16a0056b4a","$30ca700923f7cd7e$export$1e06c21ce32643dc","$30ca700923f7cd7e$export$91a4fa3e8e7c8586","$30ca700923f7cd7e$export$773fc764960da4ba","$30ca700923f7cd7e$export$a235ab136f3fda43","$30ca700923f7cd7e$export$ecfc75b1ea638281","$30ca700923f7cd7e$var$Context","parent","depth","nodeList","optionStatus","optionArg","$30ca700923f7cd7e$export$a372c43d1a7fd5d1","patternComment","DummyParseErrorReceiver","handleBody","context","body","length","lnode","type","node","cases","set","startsWith","parts","split","cmd","substring","arg","trim","push","text","childNode","isWhile","trueNode","falseNode","Map","lastIfNode","lastSwitchNode","has","upToParent","newNode","children","i","pnode","processNode","snode","ifnode","parse","src","exr","rootContext","lines","lineNo","line","test","tabNum","charAt","parentNode","newContext","endsWith","multiLineContent","nextLine","nextLineTabNum","nextLineBody","replace","ex","console","error","$6b098df580cc3f14$var$defaultRenderOptions","fontSize","fontFamily","margin","top","right","bottom","left","boxPadding","branchePadding","strokeWidth","strokeColor","backgroundColor","textColor","lineHeight","doubleLineWidth","switchNodeCaseWidth","connectorWidth","nodeListSpace","childNodeOffsetWidth","$6b098df580cc3f14$var$renderNode","options","$6b098df580cc3f14$var$renderBoxFragment","borderType","drawLeftBar","drawRightBar","$6b098df580cc3f14$var$renderListFragment","totalHeight","maxWidth","currentY","childrenSvg","childFragments","child","childFragment","height","Math","max","width","$6b098df580cc3f14$var$renderTransformTranslateSvg","svg","startY","$6b098df580cc3f14$var$renderLineSvg","ifBrancheNode","branches","label","$6b098df580cc3f14$var$renderBrancheFragment","switchBrancheNode","caseNode","entries","toString","textMetrics","$6b098df580cc3f14$var$measureTextSvg","contentWidth","contentHeight","textOffsetX","textOffsetY","radius","$6b098df580cc3f14$var$renderTextSvg","$6b098df580cc3f14$var$measureTextSvgForBranche","$6b098df580cc3f14$var$renderTextSvgForBranche","posX","posY","conditionSize","minHeight","labelw","subvieww","h","count","lastdy","lastldy","brancheFragments","ymap","index","branche","uply","bottomly","labelSize","brancheFragment","subViewSize","fragment","minldy","first","addChildLineWidth","poly","lasty","boxRight","x","y","ly","lh_temp","get","polyPoints","map","p","join","ls","charWidth","getCharWidth","char","match","forEach","dy","x1","y1","x2","y2","childSvg","document","addEventListener","spdInput","getElementById","svgOutput","fileInput","downloadButton","downloadSvgButton","convertAndRender","spdText","value","ast","innerHTML","mergedOptions","svgWidth","svgHeight","event","key","preventDefault","start","selectionStart","end","selectionEnd","file","target","files","reader","FileReader","onload","e","result","readAsText","fileName","prompt","blob","Blob","url","URL","createObjectURL","a","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","svgString","alert"],"version":3,"file":"web.957ebc9d.js.map"}